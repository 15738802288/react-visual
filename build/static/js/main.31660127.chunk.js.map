{"version":3,"sources":["components/common/ComponentAlert.jsx","components/container/Type1.jsx","components/container/Type2.jsx","components/business/Component1.jsx","components/business/Component2.jsx","view/index.jsx","serviceWorker.js","index.js"],"names":["ComponentAlert","props","confirm","state","names","active","item","allComponent","push","className","this","map","index","key","onClick","setState","Component","Type1","selectComponent","getChildComponentData","ItemComponent","componentList","bind","setComponentAttr","Type2","ItemComponent1","ItemComponent2","Component1","chartResize","isResize","setTimeout","isResize2","myChart","resize","style","serve","saveComponentAttr","attrData","console","log","echarts","init","echart","setOption","option","style1","onDoubleClick","ref","prevProps","width","height","title","text","tooltip","trigger","axisPointer","type","label","backgroundColor","legend","data","toolbox","feature","saveAsImage","grid","left","right","bottom","containLabel","xAxis","boundaryGap","yAxis","series","name","stack","areaStyle","normal","show","position","withResizeDetector","Component2","dataView","readOnly","magicType","restore","calculable","markPoint","markLine","value","allContainer","Index","save","gridList","itemDom","document","getElementById","componentChild","getAttribute","x","y","sessionStorage","setItem","JSON","stringify","componentIndex","showComponentAlert","selectContainer","activeComponent","isConfirm","val","index1","index2","attrObj","callback","saveAttrCallback","getItem","parse","component","item2","gridStack","GridStack","margin","cellHeight","removeTimeout","gridStackDom","nextProps","nextState","addComponent","dom","id","component-key","component-name","data-gs-width","data-gs-height","data-gs-x","data-gs-y","delItem","componentRef","Date","getTime","makeWidget","length","removeWidget","splice","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.31660127.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport './style/componentAlert.css';\r\n\r\nclass ComponentAlert extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        let names = [];\r\n        for (let item in this.props.allComponent) {\r\n            names.push(item)\r\n        }\r\n        this.state = {\r\n            names,\r\n            active:0,\r\n        };\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='component-alert'>\r\n                <div className='component-alert-box'>\r\n                    <div className='component-list'>\r\n                        {\r\n                            this.state.names.map((item , index)=>{\r\n                                return (\r\n                                    <div\r\n                                        key={item}\r\n                                        onClick={()=>{this.setState({active:index})}}\r\n                                        className={'item ' + (index === this.state.active ? 'active' : '')}>\r\n                                        {item}\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                    <div className='footer-button'>\r\n                        <span onClick={this.props.confirm}>取消</span>\r\n                        <span onClick={this.confirm}>确定</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    confirm =()=>{\r\n        this.props.confirm(true,this.state.names[this.state.active]);\r\n    }\r\n}\r\n\r\nexport default ComponentAlert;\r\n","import React , {Component} from 'react';\r\nimport './style/type1.css';\r\n\r\nclass Type1 extends  Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n    render() {\r\n        let ItemComponent = this.props.componentList[0] || '';\r\n        return (\r\n            <div className='container-type1'>\r\n                <span\r\n                    className='select-component'\r\n                    onClick={this.selectComponent.bind(this,0)}>\r\n                    选择组件\r\n                </span>\r\n                { ItemComponent ?  <ItemComponent setComponentAttr={this.props.setComponentAttr} />  : ''}\r\n                \r\n            </div>\r\n        )\r\n    }\r\n    selectComponent = (index)=>{\r\n        this.props.selectComponent(this.props.index,index);\r\n    }\r\n    /**\r\n     * 获取子组件数据\r\n     */\r\n    getChildComponentData = ()=>{\r\n    \r\n    }\r\n}\r\n\r\nexport default Type1;\r\n","import React , {Component} from 'react';\r\nimport './style/type2.css';\r\n\r\nclass Type2 extends  Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n    render() {\r\n        let ItemComponent1 = this.props.componentList[0] || '',\r\n            ItemComponent2 = this.props.componentList[1] || '';\r\n        return (\r\n            <div className='container-type2'>\r\n                <div className='item'>\r\n                    <span\r\n                        className='select-component'\r\n                        onClick={this.selectComponent.bind(this,0)}>\r\n                        选择组件\r\n                    </span>\r\n                    { ItemComponent1 ?  <ItemComponent1 />  : ''}\r\n                </div>\r\n                <div className='item'>\r\n                    <span\r\n                        className='select-component'\r\n                        onClick={this.selectComponent.bind(this,1)}>\r\n                        选择组件\r\n                    </span>\r\n                    { ItemComponent2 ?  <ItemComponent2 />  : ''}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    selectComponent = (index)=>{\r\n        this.props.selectComponent(this.props.index,index);\r\n    }\r\n}\r\n\r\nexport default Type2;\r\n","import React, {Component} from 'react';\r\nimport echarts from 'echarts'\r\nimport {withResizeDetector} from 'react-resize-detector';//组件宽度变化监听\r\n\r\nclass Component1 extends Component {\r\n    componentDidMount() {\r\n        this.myChart = echarts.init(this.echart);\r\n        this.myChart.setOption(option)\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div\r\n                style={style1}\r\n                onDoubleClick={this.setComponentAttr}>\r\n                <div\r\n                    ref={echart => {\r\n                        this.echart = echart;\r\n                    }}\r\n                    style={style1}>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    componentDidUpdate(prevProps) {\r\n        const {width} = this.props;\r\n        if (width !== prevProps.width) {//组件宽度变化\r\n            this.chartResize();\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * dom大小100 ms内不再发生变化就去 resize\r\n     */\r\n    chartResize = () => {\r\n        this.isResize = this.isResize ? this.isResize + 1 : 1;\r\n        setTimeout(() => {\r\n            this.isResize2 = this.isResize2 ? this.isResize2 + 1 : 1;\r\n            if (this.isResize === this.isResize2) {\r\n                this.isResize = 0;\r\n                this.isResize2 = 0;\r\n                if(this.myChart){\r\n                    this.myChart.resize();\r\n                }\r\n            }\r\n        \r\n        }, 100)\r\n    }\r\n    /**\r\n     * 设置组件属性\r\n     */\r\n    setComponentAttr = () => {\r\n        this.props.setComponentAttr({\r\n            style:[],\r\n            serve:[],\r\n        },this.saveComponentAttr)\r\n    }\r\n    /**\r\n     * 保存属性\r\n     */\r\n    saveComponentAttr = (attrData)=>{\r\n        console.log(this,attrData)\r\n    }\r\n}\r\n\r\nlet style1 = {\r\n    width: '100%',\r\n    height: '100%',\r\n}\r\nlet option = {\r\n    title: {\r\n        text: ''\r\n    },\r\n    tooltip: {\r\n        trigger: 'axis',\r\n        axisPointer: {\r\n            type: 'cross',\r\n            label: {\r\n                backgroundColor: '#6a7985'\r\n            }\r\n        }\r\n    },\r\n    legend: {\r\n        data: ['邮件营销', '联盟广告', '视频广告', '直接访问', '搜索引擎']\r\n    },\r\n    toolbox: {\r\n        feature: {\r\n            saveAsImage: {}\r\n        }\r\n    },\r\n    grid: {\r\n        left: '3%',\r\n        right: '4%',\r\n        bottom: '3%',\r\n        containLabel: true\r\n    },\r\n    xAxis: [\r\n        {\r\n            type: 'category',\r\n            boundaryGap: false,\r\n            data: ['周一', '周二', '周三', '周四', '周五', '周六', '周日']\r\n        }\r\n    ],\r\n    yAxis: [\r\n        {\r\n            type: 'value'\r\n        }\r\n    ],\r\n    series: [\r\n        {\r\n            name: '邮件营销',\r\n            type: 'line',\r\n            stack: '总量',\r\n            areaStyle: {},\r\n            data: [120, 132, 101, 134, 90, 230, 210]\r\n        },\r\n        {\r\n            name: '联盟广告',\r\n            type: 'line',\r\n            stack: '总量',\r\n            areaStyle: {},\r\n            data: [220, 182, 191, 234, 290, 330, 310]\r\n        },\r\n        {\r\n            name: '视频广告',\r\n            type: 'line',\r\n            stack: '总量',\r\n            areaStyle: {},\r\n            data: [150, 232, 201, 154, 190, 330, 410]\r\n        },\r\n        {\r\n            name: '直接访问',\r\n            type: 'line',\r\n            stack: '总量',\r\n            areaStyle: {},\r\n            data: [320, 332, 301, 334, 390, 330, 320]\r\n        },\r\n        {\r\n            name: '搜索引擎',\r\n            type: 'line',\r\n            stack: '总量',\r\n            label: {\r\n                normal: {\r\n                    show: true,\r\n                    position: 'top'\r\n                }\r\n            },\r\n            areaStyle: {},\r\n            data: [820, 932, 901, 934, 1290, 1330, 1320]\r\n        }\r\n    ]\r\n};\r\n\r\nexport default {\r\n    ...withResizeDetector(Component1),\r\n    name:'Component1',\r\n};\r\n\r\n","import React, {Component} from 'react';\r\nimport echarts from 'echarts'\r\nimport {withResizeDetector} from 'react-resize-detector';//组件宽度变化监听\r\n\r\nclass Component2 extends Component {\r\n    componentDidMount() {\r\n        this.myChart = echarts.init(this.echart);\r\n        this.myChart.setOption(option)\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div style={style1}>\r\n                <div\r\n                    ref={echart => {\r\n                        this.echart = echart;\r\n                    }}\r\n                    style={style1}>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    \r\n    componentDidUpdate(prevProps) {\r\n        const {width} = this.props;\r\n        if (width !== prevProps.width) {//组件宽度变化\r\n            this.chartResize();\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * dom大小100 ms内不再发生变化就去 resize\r\n     */\r\n    chartResize = () => {\r\n        this.isResize = this.isResize ? this.isResize + 1 : 1;\r\n        setTimeout(() => {\r\n            this.isResize2 = this.isResize2 ? this.isResize2 + 1 : 1;\r\n            if (this.isResize === this.isResize2) {\r\n                this.isResize = 0;\r\n                this.isResize2 = 0;\r\n                if(this.myChart){\r\n                    this.myChart.resize();\r\n                }\r\n            }\r\n        }, 100)\r\n    }\r\n}\r\n\r\nlet style1 = {\r\n    width: '100%',\r\n    height: '100%',\r\n}\r\nlet option = {\r\n    title: {\r\n        text: '',\r\n    },\r\n    tooltip: {\r\n        trigger: 'axis'\r\n    },\r\n    legend: {\r\n        data: ['蒸发量', '降水量']\r\n    },\r\n    toolbox: {\r\n        show: true,\r\n        feature: {\r\n            dataView: {show: true, readOnly: false},\r\n            magicType: {show: true, type: ['line', 'bar']},\r\n            restore: {show: true},\r\n            saveAsImage: {show: true}\r\n        }\r\n    },\r\n    calculable: true,\r\n    xAxis: [\r\n        {\r\n            type: 'category',\r\n            data: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月']\r\n        }\r\n    ],\r\n    yAxis: [\r\n        {\r\n            type: 'value'\r\n        }\r\n    ],\r\n    series: [\r\n        {\r\n            name: '蒸发量',\r\n            type: 'bar',\r\n            data: [2.0, 4.9, 7.0, 23.2, 25.6, 76.7, 135.6, 162.2, 32.6, 20.0, 6.4, 3.3],\r\n            markPoint: {\r\n                data: [\r\n                    {type: 'max', name: '最大值'},\r\n                    {type: 'min', name: '最小值'}\r\n                ]\r\n            },\r\n            markLine: {\r\n                data: [\r\n                    {type: 'average', name: '平均值'}\r\n                ]\r\n            }\r\n        },\r\n        {\r\n            name: '降水量',\r\n            type: 'bar',\r\n            data: [2.6, 5.9, 9.0, 26.4, 28.7, 70.7, 175.6, 182.2, 48.7, 18.8, 6.0, 2.3],\r\n            markPoint: {\r\n                data: [\r\n                    {name: '年最高', value: 182.2, xAxis: 7, yAxis: 183},\r\n                    {name: '年最低', value: 2.3, xAxis: 11, yAxis: 3}\r\n                ]\r\n            },\r\n            markLine: {\r\n                data: [\r\n                    {type: 'average', name: '平均值'}\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n};\r\n\r\n\r\nexport default {\r\n    ...withResizeDetector(Component2),\r\n    name:'Component2',\r\n};\r\n","import React, {Component} from 'react';\n\nimport ComponentAlert from '../components/common/ComponentAlert'\nimport Type1 from '../components/container/Type1'\nimport Type2 from '../components/container/Type2'\nimport Component1 from '../components/business/Component1'\nimport Component2 from '../components/business/Component2'\n\nimport GridStack from \"gridstack/dist/gridstack.all.js\";\nimport \"gridstack/dist/gridstack.css\";\nimport './index.css'\n\nvar allComponent = {Component1, Component2},\n    allContainer = {Type1,Type2};\n\nclass Index extends Component {\n    constructor(props) {\n        super(props)\n        //读取缓存数据\n        let data = sessionStorage.getItem('data')\n        data = data ? JSON.parse(data) : [];\n        data = data.map((item) => {\n            item.component = allContainer[item.name]\n            item.componentChild = item.componentChild.map((item2)=>{\n                return allComponent[item2];\n            })\n            return item;\n        })\n        this.state = {\n            gridList: data,\n            showComponentAlert:false,\n            selectContainer:[],\n        }\n    }\n    \n    /**\n     * 组建挂载完成\n     */\n    componentDidMount() {\n        this.gridStack = GridStack.init({margin: 10, cellHeight: 5, removeTimeout: 100}, this.gridStackDom)\n    }\n    \n    /**\n     * dom更新过滤\n     * @param nextProps\n     * @param nextState\n     * @returns {boolean} 判断是否要更新render,  return true 更新  return false不更新\n     */\n    shouldComponentUpdate(nextProps, nextState) {\n        return true;\n    }\n    \n    render() {\n        return (\n            <div className='index'>\n                <header>\n                    <li onClick={this.addComponent.bind(this, 'Type1')}>新增 Type1 容器</li>\n                    <li onClick={this.addComponent.bind(this, 'Type2')}>新增 Type2 容器</li>\n                    <li onClick={this.save}>保存</li>\n                </header>\n                <main>\n                    <div className='grid-stack' ref={(dom) => {\n                        this.gridStackDom = dom\n                    }}>\n                        {\n                            this.state.gridList.map((item, index) => {\n                                return (\n                                    <div key={item.key}\n                                         id={'grid-item' + index}\n                                         className='grid-stack-item'\n                                         component-key={item.key}\n                                         component-name={item.name}\n                                         data-gs-width={item.width || \"6\"}\n                                         data-gs-height={item.height || \"50\"}\n                                         data-gs-x={item.x || \"\"}\n                                         data-gs-y={item.y || \"\"}>\n                                        <div className='grid-stack-item-content'>\n                                            <span\n                                                className='grid-stack-item-del'\n                                                onClick={this.delItem.bind(this, index)}>\n                                                删除\n                                            </span>\n                                            <div className='component'>\n                                                <item.component\n                                                    ref={component => {\n                                                        item.componentRef = component;\n                                                    }}\n                                                    componentList={item.componentChild}\n                                                    index={index}\n                                                    selectComponent={this.selectComponent}\n                                                    setComponentAttr={this.setComponentAttr} />\n                                            </div>\n                                        </div>\n                                    </div>\n                                )\n                            })\n                        }\n                    </div>\n                </main>\n                {\n                    this.state.showComponentAlert ? (\n                        <ComponentAlert\n                            confirm={this.activeComponent}\n                            allComponent={allComponent} />\n                    ) : ''\n                }\n            </div>\n        )\n    }\n    \n    /**\n     * 新增模块\n     * @param name 组件名称\n     */\n    addComponent(name) {\n        this.setState({\n            gridList: [\n                ...this.state.gridList,\n                {\n                    name,\n                    component: allContainer[name],\n                    componentChild:[],\n                    key: (new Date()).getTime() //生成key保证能够正确删除dom\n                }\n            ]\n        }, () => {\n            //把标签作为gridStack元素\n            this.gridStack.makeWidget('#grid-item' + (this.state.gridList.length - 1))\n        })\n        \n    }\n    \n    /**\n     * 删除模块\n     * @param index 删除索引\n     */\n    delItem(index) {\n        //param1:：标签，param2：不删除dom （否则react render时候报错找不到删除节点 居然报错）\n        this.gridStack.removeWidget(document.getElementById('grid-item' + index), false);\n        this.setState(() => {\n            let gridList = [...this.state.gridList];\n            gridList.splice(index, 1)\n            return {\n                gridList\n            }\n        })\n    }\n    \n    /**\n     * 保存页面\n     */\n    save = () => {\n        let data = this.state.gridList.map((item, index) => {\n            let itemDom = document.getElementById('grid-item' + index);\n            let componentChild = item.componentChild.map((item)=>{\n                return item.name;\n            })\n            console.log(item)\n            return {\n                key: itemDom.getAttribute('component-key'),\n                name: itemDom.getAttribute('component-name'),\n                width: itemDom.getAttribute('data-gs-width'),\n                height: itemDom.getAttribute('data-gs-height'),\n                x: itemDom.getAttribute('data-gs-x'),\n                y: itemDom.getAttribute('data-gs-y'),\n                componentChild:componentChild,\n            }\n        })\n        sessionStorage.setItem('data', JSON.stringify(data))\n    }\n    /**\n     * 选择组件\n     */\n    selectComponent = (componentIndex,index) => {\n        this.setState({\n            showComponentAlert:true,\n            selectContainer:[componentIndex,index],\n        })\n    }\n    /**\n     * 确定组件\n     */\n    activeComponent = (isConfirm,val)=>{\n        this.setState(()=>{\n            let gridList = this.state.gridList;\n            if(isConfirm === true){\n                let index1 = this.state.selectContainer[0],\n                    index2 = this.state.selectContainer[1];\n                gridList[index1].componentChild[index2] = allComponent[val];\n            }\n            return {\n                gridList,\n                showComponentAlert:false,\n            }\n        })\n    }\n    /**\n     * 设置组件属性\n     */\n    setComponentAttr = (attrObj,callback)=>{\n        this.saveAttrCallback = callback;\n        setTimeout(()=>{\n            this.saveAttrCallback(attrObj)\n        },1000)\n    }\n}\n\nexport default Index;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Index from './view/index';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Index/>,\n    document.getElementById('root')\n);\n// 不使用严格模式\n// <React.StrictMode>\n//    <Index/>\n// </React.StrictMode>\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}